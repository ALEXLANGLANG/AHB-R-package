flag = 1
for (j in 1:length(MGs)) {
j = 14
MG_controls <- MGs[[j]][MGs[[j]] %in% controls]
MG_treated <- MGs[[j]][MGs[[j]] %in% treated]
MG_weight <- sum(weight[MG_controls])
weight_sum <- weight_sum + MG_weight
mean_control_outcome <- mean(outcomes[MG_controls])
for (k in seq_along(MG_treated)) {
weighted_TT_sum <-
weighted_TT_sum +
MG_weight * (outcomes[MG_treated[k]] - mean_control_outcome)
print(j)
print(weighted_TT_sum)
}
if(flag == 0){break}
}
weight_sum <- 0
weighted_TT_sum <- 0
flag = 1
for (j in 1:length(MGs)) {
MG_controls <- MGs[[j]][MGs[[j]] %in% controls]
MG_treated <- MGs[[j]][MGs[[j]] %in% treated]
MG_weight <- sum(weight[MG_controls])
weight_sum <- weight_sum + MG_weight
mean_control_outcome <- mean(outcomes[MG_controls])
for (k in seq_along(MG_treated)) {
weighted_TT_sum <-
weighted_TT_sum +
MG_weight * (outcomes[MG_treated[k]] - mean_control_outcome)
print(j)
print(weighted_TT_sum)
}
if(flag == 0){break}
}
j = 14
MG_controls <- MGs[[j]][MGs[[j]] %in% controls]
MG_treated <- MGs[[j]][MGs[[j]] %in% treated]
MG_weight <- sum(weight[MG_controls])
weight_sum <- weight_sum + MG_weight
MG_controls
MG_treated
MG_treated
MGs[[14]]
devtools::document()
usethis::use_rcpp()
library(AHB)
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
AHB::ATE(fast_out)
AHB::ATT(fast_out)
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
AHB::ATE(fast_out)
AHB::ATT(fast_out)
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
AHB::ATE(fast_out)
AHB::ATT(fast_out)
devtools::document
devtools::document()
usethis::use_rcpp()
library(AHB)
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
AHB::ATE(fast_out)
AHB::ATT(fast_out)
devtools::document()
usethis::use_rcpp()
library(AHB)
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
AHB::ATE(fast_out)
AHB::ATT(fast_out)
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
AHB::ATE(fast_out)
AHB::ATT(fast_out)
devtools
devtools::document()
usethis::use_rcpp()
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
AHB::ATE(fast_out)
AHB::ATT(fast_out)
library(AHB)
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
AHB::ATE(fast_out)
AHB::ATT(fast_out)
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
AHB::ATE(fast_out)
AHB::ATT(fast_out)
controls
AHB_out <- fast_out
controls <- which(AHB_out$data$treated == 0)
treated <- which(AHB_out$data$treated == 1)
outcomes <- AHB_out$data$outcome
MGs <- AHB_out$MGs
controls
MGs
controls
weight <- vector('numeric', length = nrow(AHB_out$data))
for(i in 1:length(MGs)){
weight[MGs[[i]]] <- weight[MGs[[i]]] + 1
}
weight_sum <- 0
weighted_TT_sum <- 0
flag = 1
for (j in 1:length(MGs)) {
j = 11
MG_controls <- MGs[[j]][MGs[[j]] %in% controls]
MG_treated <- MGs[[j]][MGs[[j]] %in% treated]
MG_weight <- sum(weight[MG_controls])
weight_sum <- weight_sum + MG_weight
mean_control_outcome <- mean(outcomes[MG_controls])
for (k in seq_along(MG_treated)) {
weighted_TT_sum <-
weighted_TT_sum +
MG_weight * (outcomes[MG_treated[k]] - mean_control_outcome)
print(j)
print(weighted_TT_sum)
}
if(flag == 0){break}
}
ATT <- weighted_TT_sum / weight_sum
weight <- vector('numeric', length = nrow(AHB_out$data))
for(i in 1:length(MGs)){
weight[MGs[[i]]] <- weight[MGs[[i]]] + 1
}
weight_sum <- 0
weighted_TT_sum <- 0
flag = 1
for (j in 1:length(MGs)) {
MG_controls <- MGs[[j]][MGs[[j]] %in% controls]
MG_treated <- MGs[[j]][MGs[[j]] %in% treated]
MG_weight <- sum(weight[MG_controls])
weight_sum <- weight_sum + MG_weight
mean_control_outcome <- mean(outcomes[MG_controls])
for (k in seq_along(MG_treated)) {
weighted_TT_sum <-
weighted_TT_sum +
MG_weight * (outcomes[MG_treated[k]] - mean_control_outcome)
print(j)
print(weighted_TT_sum)
}
if(flag == 0){break}
}
AHB_out <- fast_out
controls <- which(AHB_out$data$treated == 0)
treated <- which(AHB_out$data$treated == 1)
outcomes <- AHB_out$data$outcome
MGs <- AHB_out$MGs
weight <- vector('numeric', length = nrow(AHB_out$data))
for(i in 1:length(MGs)){
weight[MGs[[i]]] <- weight[MGs[[i]]] + 1
}
weight_sum <- 0
weighted_TT_sum <- 0
flag = 1
for (j in 1:length(MGs)) {
MG_controls <- MGs[[j]][MGs[[j]] %in% controls]
MG_treated <- MGs[[j]][MGs[[j]] %in% treated]
MG_weight <- sum(weight[MG_controls])
weight_sum <- weight_sum + MG_weight
mean_control_outcome <- mean(outcomes[MG_controls])
for (k in seq_along(MG_treated)) {
weighted_TT_sum <-
weighted_TT_sum +
MG_weight * (outcomes[MG_treated[k]] - mean_control_outcome)
print(j)
print(weighted_TT_sum)
}
if(flag == 0){break}
}
ATT <- weighted_TT_sum / weight_sum
MGs
MG_controls
controls
MG[[1]]
MGs[[1]]
devtools::document()
usethis::use_rcpp()
library(AHB)
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
AHB::ATE(fast_out)
AHB::ATT(fast_out)
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
AHB::ATE(fast_out)
AHB::ATT(fast_out)
CATEs
AHB_out <- fast_out
controls <- which(AHB_out$data$treated == 0)
treated <- which(AHB_out$data$treated == 1)
outcomes <- AHB_out$data$outcome
MGs <- AHB_out$MGs
MGs[[11]]
devtools::document()
usethis::use_rcpp()
library(AHB)
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
AHB::ATE(fast_out)
AHB::ATT(fast_out)
fast_out[[4]]
AHB_out <- fast_out
controls <- which(AHB_out$data$treated == 0)
treated <- which(AHB_out$data$treated == 1)
outcomes <- AHB_out$data$outcome
MGs <- AHB_out$MGs
MGs[[28]]
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
AHB::ATE(fast_out)
AHB::ATT(fast_out)
AHB_out <- fast_out
controls <- which(AHB_out$data$treated == 0)
treated <- which(AHB_out$data$treated == 1)
outcomes <- AHB_out$data$outcome
MGs <- AHB_out$MGs
MGs
devtools::document()
usethis::use_rcpp()
library(AHB)
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
AHB::ATE(fast_out)
AHB::ATT(fast_out)
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
AHB::ATE(fast_out)
AHB::ATT(fast_out)
AHB_out <- fast_out
controls <- which(AHB_out$data$treated == 0)
treated <- which(AHB_out$data$treated == 1)
outcomes <- AHB_out$data$outcome
MGs <- AHB_out$MGs
MGs[[17]]
controls
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
AHB::ATE(fast_out)
AHB::ATT(fast_out)
controls
AHB_out <- fast_out
controls <- which(AHB_out$data$treated == 0)
treated <- which(AHB_out$data$treated == 1)
outcomes <- AHB_out$data$outcome
MGs <- AHB_out$MGs
weight <- vector('numeric', length = nrow(AHB_out$data))
for(i in 1:length(MGs)){
weight[MGs[[i]]] <- weight[MGs[[i]]] + 1
}
weight_sum <- 0
weighted_TT_sum <- 0
flag = 1
for (j in 1:length(MGs)) {
MG_controls <- MGs[[j]][MGs[[j]] %in% controls]
MG_treated <- MGs[[j]][MGs[[j]] %in% treated]
MG_weight <- sum(weight[MG_controls])
weight_sum <- weight_sum + MG_weight
mean_control_outcome <- mean(outcomes[MG_controls])
for (k in seq_along(MG_treated)) {
weighted_TT_sum <-
weighted_TT_sum +
MG_weight * (outcomes[MG_treated[k]] - mean_control_outcome)
print(j)
print(weighted_TT_sum)
}
if(flag == 0){break}
}
ATT <- weighted_TT_sum / weight_sum
MG[[8]]
MGs[[8]]
controls
devtools::document()
usethis::use_rcpp()
library(AHB)
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
AHB::ATE(fast_out)
AHB::ATT(fast_out)
AHB_out <- fast_out
controls <- which(AHB_out$data$treated == 0)
treated <- which(AHB_out$data$treated == 1)
outcomes <- AHB_out$data$outcome
MGs <- AHB_out$MGs
AHB_out <- fast_out
controls <- which(AHB_out$data$treated == 0)
treated <- which(AHB_out$data$treated == 1)
outcomes <- AHB_out$data$outcome
MGs <- AHB_out$MGs
weight <- vector('numeric', length = nrow(AHB_out$data))
for(i in 1:length(MGs)){
weight[MGs[[i]]] <- weight[MGs[[i]]] + 1
}
weight_sum <- 0
weighted_TT_sum <- 0
flag = 1
for (j in 1:length(MGs)) {
MG_controls <- MGs[[j]][MGs[[j]] %in% controls]
MG_treated <- MGs[[j]][MGs[[j]] %in% treated]
MG_weight <- sum(weight[MG_controls])
weight_sum <- weight_sum + MG_weight
mean_control_outcome <- mean(outcomes[MG_controls])
for (k in seq_along(MG_treated)) {
weighted_TT_sum <-
weighted_TT_sum +
MG_weight * (outcomes[MG_treated[k]] - mean_control_outcome)
print(j)
print(weighted_TT_sum)
}
if(flag == 0){break}
}
ATT <- weighted_TT_sum / weight_sum
MG[[3]]
MGs[[3]]
controls
df <- read_data(data,holdout,treated_column_name,outcome_column_name)
check_args_fast(data = df[[1]],holdout = df[[2]],
treated_column_name=treated_column_name, outcome_column_name=outcome_column_name,
black_box = black_box, cv = cv, C = C)
inputs <- estimator_inputs(df[[2]], df[[1]],
treated_column_name = treated_column_name, outcome_column_name = outcome_column_name,
black_box = black_box, cv = cv)
f <- inputs[[1]]
n <- inputs[[2]]
n_train <- inputs[[3]]
p <- inputs[[4]]
train_df <- inputs[[5]]
train_covs <- inputs[[6]]
train_control <- inputs[[7]]
train_treated <- inputs[[8]]
test_df <- inputs[[9]]
test_covs <- inputs[[10]]
test_control <- inputs[[11]]
test_treated <- inputs[[12]]
n_test_control <- inputs[[13]]
n_test_treated <- inputs[[14]]
bart_fit0 <- inputs[[15]]
bart_fit1 <- inputs[[16]]
#counterfactuals <- inputs[[17]]
devtools::document()
usethis::use_rcpp()
library(AHB)
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
AHB::ATE(fast_out)
AHB::ATT(fast_out)
AHB_out <- fast_out
controls <- which(AHB_out$data$treated == 0)
treated <- which(AHB_out$data$treated == 1)
outcomes <- AHB_out$data$outcome
MGs <- AHB_out$MGs
weight <- vector('numeric', length = nrow(AHB_out$data))
for(i in 1:length(MGs)){
weight[MGs[[i]]] <- weight[MGs[[i]]] + 1
}
weight_sum <- 0
weighted_TT_sum <- 0
flag = 1
for (j in 1:length(MGs)) {
MG_controls <- MGs[[j]][MGs[[j]] %in% controls]
MG_treated <- MGs[[j]][MGs[[j]] %in% treated]
MG_weight <- sum(weight[MG_controls])
weight_sum <- weight_sum + MG_weight
mean_control_outcome <- mean(outcomes[MG_controls])
for (k in seq_along(MG_treated)) {
weighted_TT_sum <-
weighted_TT_sum +
MG_weight * (outcomes[MG_treated[k]] - mean_control_outcome)
print(j)
print(weighted_TT_sum)
}
if(flag == 0){break}
}
ATT <- weighted_TT_sum / weight_sum
MG[[5]]
MGs[[5]]
devtools::document()
usethis::use_rcpp()
library(AHB)
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
AHB::ATE(fast_out)
AHB::ATT(fast_out)
usethis::use_rcpp()
devtools::document()
usethis::use_rcpp()
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
AHB::ATE(fast_out)
AHB::ATT(fast_out)
library(AHB)
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
AHB::ATE(fast_out)
AHB::ATT(fast_out)
AHB_out <- fast_out
AHB_out <- fast_out
controls <- which(AHB_out$data$treated == 0)
treated <- which(AHB_out$data$treated == 1)
outcomes <- AHB_out$data$outcome
MGs <- AHB_out$MGs
weight <- vector('numeric', length = nrow(AHB_out$data))
for(i in 1:length(MGs)){
weight[MGs[[i]]] <- weight[MGs[[i]]] + 1
}
weight_sum <- 0
weighted_TT_sum <- 0
flag = 1
for (j in 1:length(MGs)) {
MG_controls <- MGs[[j]][MGs[[j]] %in% controls]
MG_treated <- MGs[[j]][MGs[[j]] %in% treated]
MG_weight <- sum(weight[MG_controls])
weight_sum <- weight_sum + MG_weight
mean_control_outcome <- mean(outcomes[MG_controls])
for (k in seq_along(MG_treated)) {
weighted_TT_sum <-
weighted_TT_sum +
MG_weight * (outcomes[MG_treated[k]] - mean_control_outcome)
print(j)
print(weighted_TT_sum)
}
if(flag == 0){break}
}
MGs[[2]]
controls
devtools::document()
usethis::use_rcpp()
library(AHB)
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
AHB::ATE(fast_out)
AHB::ATT(fast_out)
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
AHB::ATE(fast_out)
AHB::ATT(fast_out)
devtools::document()
usethis::use_rcpp()
library(AHB)
for(i in 1:10){
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
AHB::ATE(fast_out)
AHB::ATT(fast_out)
}
for(i in 1:10){
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
print(AHB::ATE(fast_out))
print(AHB::ATT(fast_out) )
}
for(i in 1:20){
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
print(AHB::ATE(fast_out))
print(AHB::ATT(fast_out) )
}
devtools::document()
usethis::use_rcpp()
library(AHB)
for(i in 1:20){
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_fast_match(data = df, holdout = 0.5,n_prune = 50)
print(AHB::ATE(fast_out))
print(AHB::ATT(fast_out) )
}
for(i in 1:20){
p <- 5
df <- gen_data(n_units = 100, p = p)
fast_out <- AHB_MIP_match(data = df, holdout = 0.5,n_prune = 50)
print(AHB::ATE(fast_out))
print(AHB::ATT(fast_out) )
}
devtools::document()
usethis::use_rcpp()
library(AHB)

map[0] = c(s,"asdf")
map$a =  c(s,"asdf")
map
map["cov"]=  c(s,"asdf")
# This function convert the all factor column into dummies
mapFactorToDummy <- function(data, treated_column_name, outcome_column_name){
if (!requireNamespace("fastDummies", quietly = TRUE)) {
stop("The fastDummies package must be installed")
}
hashmap_orignalColToDummyCol <- list()
colNames <- colnames(data)
data_dummy <- NULL
for(i in length(colNames)){
cov = colNames[i]
if(is.factor(data[,cov]) && !(cov %in% c(treated_column_name, outcome_column_name))){
toAdd <- fastDummies::dummy_cols(data[cov], remove_selected_columns=TRUE)
}
else{
toAdd<-data[cov]
}
if(is.null(data_dummy)){
data_dummy <- toAdd
}
else{
data_dummy<-cbind(data_dummy,toAdd)
}
}
return (data_dummy)
}
data_dummpy<-mapFactorToDummy(data, treated_column_name, outcome_column_name)
gen_data()
data <- gen_data()
data["X3"] = as.factor(letters[1:100])
data["X4"] <- "a"
data[c(1:4),"X4"] <- "0"
data["X2"] <- 1
data[c(1:4),"X2"] <- 0
data <- mapCategoricalToFactor(data,treated_column_name = 'treated',outcome_column_name = 'outcome')
data <- handle_missing(data,"data",missing_data = "drop",'treated','outcome', T, F)
data_dummy <- mapFactorToDummy(data, 'treated','outcome')
expect_equal(is.double(data_dummy[,"X1"]), TRUE)
expect_equal(is.numeric(data_dummy[,"X2"]) , TRUE)
expect_equal(is.numeric(data_dummy[,"X3_z"]), TRUE)
expect_equal(is.numeric(data_dummy[,"X4_a"]), TRUE)
data <- gen_data()
data["X3"] = as.factor(letters[1:100])
data["X4"] <- "a"
data[c(1:4),"X4"] <- "0"
data["X2"] <- 1
data[c(1:4),"X2"] <- 0
data <- mapCategoricalToFactor(data,treated_column_name = 'treated',outcome_column_name = 'outcome')
data <- handle_missing(data,"data",missing_data = "drop",'treated','outcome', T, F)
data_dummy <- mapFactorToDummy(data, 'treated','outcome')
data
data <- handle_missing(data,"data",missing_data = "drop",'treated','outcome', T, F)
data_dummy <- mapFactorToDummy(data, 'treated','outcome')
data_dummy
list_names <- c()
list_names[1] <- 123
list_names[2]<- "asdg"
listDummyCol <- list()
colNames <- colnames(data)
data_dummy <- NULL
for(i in 1:length(colNames)){
cov = colNames[i]
if(is.factor(data[,cov]) && !(cov %in% c(treated_column_name, outcome_column_name))){
toAdd <- fastDummies::dummy_cols(data[cov], remove_selected_columns=TRUE)
listDummyCol[i] <- collectColNames(cov, colnames(toAdd))
}
else{
toAdd<-data[cov]
listDummyCol[i] <- collectColNames(cov, colnames(toAdd))
}
if(is.null(data_dummy)){
data_dummy <- toAdd
}
else{
data_dummy<-cbind(data_dummy,toAdd)
}
}
#This helps to remove the original column name from the dummy column
removeHeadString<- function(headStr, totalStr){
return (substr(totalStr, nchar(headStr)+2, nchar(totalStr)))
}
#This collects the dummy columNames
collectColNames<- function(headStr, colNames){
list_names <- c()
for(i in 1:length(colNames)){
list_names[i] <- removeHeadString(headStr, colNames[i])
}
return (list_names)
}
# This function convert the all factor column into dummies
mapFactorToDummy <- function(data, treated_column_name, outcome_column_name){
if (!requireNamespace("fastDummies", quietly = TRUE)) {
stop("The fastDummies package must be installed")
}
listDummyCol <- list()
colNames <- colnames(data)
data_dummy <- NULL
for(i in 1:length(colNames)){
cov = colNames[i]
if(is.factor(data[,cov]) && !(cov %in% c(treated_column_name, outcome_column_name))){
toAdd <- fastDummies::dummy_cols(data[cov], remove_selected_columns=TRUE)
listDummyCol[i] <- collectColNames(cov, colnames(toAdd))
}
else{
toAdd<-data[cov]
listDummyCol[i] <- collectColNames(cov, colnames(toAdd))
}
if(is.null(data_dummy)){
data_dummy <- toAdd
}
else{
data_dummy<-cbind(data_dummy,toAdd)
}
}
return (data_dummy,listDummyCol)
}
listDummyCol <- list()
colNames <- colnames(data)
data_dummy <- NULL
for(i in 1:length(colNames)){
cov = colNames[i]
if(is.factor(data[,cov]) && !(cov %in% c(treated_column_name, outcome_column_name))){
toAdd <- fastDummies::dummy_cols(data[cov], remove_selected_columns=TRUE)
listDummyCol[i] <- collectColNames(cov, colnames(toAdd))
}
else{
toAdd<-data[cov]
listDummyCol[i] <- collectColNames(cov, colnames(toAdd))
}
if(is.null(data_dummy)){
data_dummy <- toAdd
}
else{
data_dummy<-cbind(data_dummy,toAdd)
}
}
for(i in 1:length(colNames)){
cov = colNames[i]
if(is.factor(data[,cov]) && !(cov %in% c(treated_column_name, outcome_column_name))){
toAdd <- fastDummies::dummy_cols(data[cov], remove_selected_columns=TRUE)
print(colnames(toAdd))
listDummyCol[i] <- collectColNames(cov, colnames(toAdd))
}
else{
toAdd<-data[cov]
listDummyCol[i] <- collectColNames(cov, colnames(toAdd))
}
if(is.null(data_dummy)){
data_dummy <- toAdd
}
else{
data_dummy<-cbind(data_dummy,toAdd)
}
}
listDummyCol <- list()
colNames <- colnames(data)
data_dummy <- NULL
for(i in 1:length(colNames)){
cov = colNames[i]
if(is.factor(data[,cov]) && !(cov %in% c(treated_column_name, outcome_column_name))){
toAdd <- fastDummies::dummy_cols(data[cov], remove_selected_columns=TRUE)
print(colnames(toAdd))
listDummyCol[i] <- collectColNames(cov, unlist(colnames(toAdd)))
}
else{
toAdd<-data[cov]
listDummyCol[i] <- collectColNames(cov, unlist(colnames(toAdd)))
}
if(is.null(data_dummy)){
data_dummy <- toAdd
}
else{
data_dummy<-cbind(data_dummy,toAdd)
}
}
print(collectColNames(cov, unlist(colnames(toAdd))))
print(collectColNames(cov, unlist(colnames(toAdd))))
print(collectColNames(cov, (colnames(toAdd))))
print(length(colnames(toAdd)))
colnames(toAdd)
print(length(unlist(colnames(toAdd))))
# This function convert the all factor column into dummies
mapFactorToDummy <- function(data, treated_column_name, outcome_column_name){
if (!requireNamespace("fastDummies", quietly = TRUE)) {
stop("The fastDummies package must be installed")
}
listDummyCol <- list()
colNames <- colnames(data)
data_dummy <- NULL
for(i in 1:length(colNames)){
cov = colNames[i]
if(is.factor(data[,cov]) && !(cov %in% c(treated_column_name, outcome_column_name))){
toAdd <- fastDummies::dummy_cols(data[cov], remove_selected_columns=TRUE)
print()
print(length(unlist(colnames(toAdd))))
print(collectColNames(cov, (colnames(toAdd))))
listDummyCol[i] <- collectColNames(cov, unlist(colnames(toAdd)))
}
else{
toAdd<-data[cov]
listDummyCol[i] <- collectColNames(cov, unlist(colnames(toAdd)))
}
if(is.null(data_dummy)){
data_dummy <- toAdd
}
else{
data_dummy<-cbind(data_dummy,toAdd)
}
}
return (data_dummy,listDummyCol)
}
#This helps to remove the original column name from the dummy column
removeHeadString<- function(headStr, totalStr){
return (substr(totalStr, nchar(headStr)+2, nchar(totalStr)))
}
#This collects the dummy columNames
collectColNames<- function(headStr, colNames){
list_names <- c()
for(i in 1:length(colNames[[1]])){
list_names[i] <- removeHeadString(headStr, colNames[i])
}
return (list_names)
}
# This function convert the all factor column into dummies
mapFactorToDummy <- function(data, treated_column_name, outcome_column_name){
if (!requireNamespace("fastDummies", quietly = TRUE)) {
stop("The fastDummies package must be installed")
}
listDummyCol <- list()
colNames <- colnames(data)
data_dummy <- NULL
for(i in 1:length(colNames)){
cov = colNames[i]
if(is.factor(data[,cov]) && !(cov %in% c(treated_column_name, outcome_column_name))){
toAdd <- fastDummies::dummy_cols(data[cov], remove_selected_columns=TRUE)
print()
print(length(unlist(colnames(toAdd))))
print(collectColNames(cov, (colnames(toAdd))))
listDummyCol[i] <- collectColNames(cov, colnames(toAdd))
}
else{
toAdd<-data[cov]
listDummyCol[i] <- collectColNames(cov, colnames(toAdd))
}
if(is.null(data_dummy)){
data_dummy <- toAdd
}
else{
data_dummy<-cbind(data_dummy,toAdd)
}
}
return (data_dummy,listDummyCol)
}
listDummyCol <- list()
colNames <- colnames(data)
data_dummy <- NULL
for(i in 1:length(colNames)){
cov = colNames[i]
if(is.factor(data[,cov]) && !(cov %in% c(treated_column_name, outcome_column_name))){
toAdd <- fastDummies::dummy_cols(data[cov], remove_selected_columns=TRUE)
print()
print(length(unlist(colnames(toAdd))))
print(collectColNames(cov, (colnames(toAdd))))
listDummyCol[i] <- collectColNames(cov, colnames(toAdd))
}
else{
toAdd<-data[cov]
listDummyCol[i] <- collectColNames(cov, colnames(toAdd))
}
if(is.null(data_dummy)){
data_dummy <- toAdd
}
else{
data_dummy<-cbind(data_dummy,toAdd)
}
}
if (!requireNamespace("fastDummies", quietly = TRUE)) {
stop("The fastDummies package must be installed")
}
listDummyCol <- list()
colNames <- colnames(data)
data_dummy <- NULL
for(i in 1:length(colNames)){
cov = colNames[i]
if(is.factor(data[,cov]) && !(cov %in% c(treated_column_name, outcome_column_name))){
toAdd <- fastDummies::dummy_cols(data[cov], remove_selected_columns=TRUE)
print(length(unlist(colnames(toAdd))))
print(collectColNames(cov, (colnames(toAdd))))
listDummyCol[i] <- collectColNames(cov, colnames(toAdd))
}
else{
toAdd<-data[cov]
listDummyCol[i] <- collectColNames(cov, colnames(toAdd))
}
if(is.null(data_dummy)){
data_dummy <- toAdd
}
else{
data_dummy<-cbind(data_dummy,toAdd)
}
}
return (data_dummy,listDummyCol)
# This function convert the all factor column into dummies
mapFactorToDummy <- function(data, treated_column_name, outcome_column_name){
if (!requireNamespace("fastDummies", quietly = TRUE)) {
stop("The fastDummies package must be installed")
}
listDummyCol <- list()
colNames <- colnames(data)
data_dummy <- NULL
for(i in 1:length(colNames)){
cov = colNames[i]
if(is.factor(data[,cov]) && !(cov %in% c(treated_column_name, outcome_column_name))){
toAdd <- fastDummies::dummy_cols(data[cov], remove_selected_columns=TRUE)
print(length(unlist(colnames(toAdd))))
print(collectColNames(cov, (colnames(toAdd))))
listDummyCol[i] <- collectColNames(cov, colnames(toAdd))
}
else{
toAdd<-data[cov]
listDummyCol[i] <- collectColNames(cov, colnames(toAdd))
}
if(is.null(data_dummy)){
data_dummy <- toAdd
}
else{
data_dummy<-cbind(data_dummy,toAdd)
}
}
return (c(data_dummy,listDummyCol))
}
listDummyCol <- list()
colNames <- colnames(data)
data_dummy <- NULL
for(i in 1:length(colNames)){
cov = colNames[i]
if(is.factor(data[,cov]) && !(cov %in% c(treated_column_name, outcome_column_name))){
toAdd <- fastDummies::dummy_cols(data[cov], remove_selected_columns=TRUE)
print(length(unlist(colnames(toAdd))))
print(collectColNames(cov, (colnames(toAdd))))
listDummyCol[i] <- collectColNames(cov, colnames(toAdd))
}
else{
toAdd<-data[cov]
listDummyCol[i] <- collectColNames(cov, colnames(toAdd))
}
if(is.null(data_dummy)){
data_dummy <- toAdd
}
else{
data_dummy<-cbind(data_dummy,toAdd)
}
}
View(data)
length(colNames[[1]])
colNames
length(colNames[1])
length(colNames[[1]])
length(colNames[[2]])
length(colNames[[3]])
lengths(colNames)
sum(lengths(colNames))
# This function convert the all factor column into dummies
mapFactorToDummy <- function(data, treated_column_name, outcome_column_name){
if (!requireNamespace("fastDummies", quietly = TRUE)) {
stop("The fastDummies package must be installed")
}
listDummyCol <- list()
colNames <- colnames(data)
data_dummy <- NULL
for(i in 1:length(colNames)){
cov = colNames[i]
if(is.factor(data[,cov]) && !(cov %in% c(treated_column_name, outcome_column_name))){
toAdd <- fastDummies::dummy_cols(data[cov], remove_selected_columns=TRUE)
print(length(unlist(colnames(toAdd))))
print(collectColNames(cov, (colnames(toAdd))))
listDummyCol[i] <- collectColNames(cov, colnames(toAdd))
}
else{
toAdd<-data[cov]
listDummyCol[i] <- collectColNames(cov, colnames(toAdd))
}
if(is.null(data_dummy)){
data_dummy <- toAdd
}
else{
data_dummy<-cbind(data_dummy,toAdd)
}
}
return (c(data_dummy,listDummyCol))
}
#This helps to remove the original column name from the dummy column
removeHeadString<- function(headStr, totalStr){
return (substr(totalStr, nchar(headStr)+2, nchar(totalStr)))
}
#This collects the dummy columNames
collectColNames<- function(headStr, colNames){
list_names <- c()
print()
for(i in 1:sum(lengths(colNames))){
list_names[i] <- removeHeadString(headStr, colNames[i])
}
return (list_names)
}
listDummyCol <- list()
colNames <- colnames(data)
data_dummy <- NULL
for(i in 1:length(colNames)){
cov = colNames[i]
if(is.factor(data[,cov]) && !(cov %in% c(treated_column_name, outcome_column_name))){
toAdd <- fastDummies::dummy_cols(data[cov], remove_selected_columns=TRUE)
print(length(unlist(colnames(toAdd))))
print(collectColNames(cov, (colnames(toAdd))))
listDummyCol[i] <- collectColNames(cov, colnames(toAdd))
}
else{
toAdd<-data[cov]
listDummyCol[i] <- collectColNames(cov, colnames(toAdd))
}
if(is.null(data_dummy)){
data_dummy <- toAdd
}
else{
data_dummy<-cbind(data_dummy,toAdd)
}
}
#This helps to remove the original column name from the dummy column
removeHeadString<- function(headStr, totalStr){
return (substr(totalStr, nchar(headStr)+2, nchar(totalStr)))
}
#This collects the dummy columNames
collectColNames<- function(headStr, colNames){
list_names <- c()
for(i in 1:sum(lengths(colNames))){
list_names[i] <- removeHeadString(headStr, colNames[i])
}
return (list_names)
}
listDummyCol <- list()
colNames <- colnames(data)
data_dummy <- NULL
for(i in 1:length(colNames)){
cov = colNames[i]
if(is.factor(data[,cov]) && !(cov %in% c(treated_column_name, outcome_column_name))){
toAdd <- fastDummies::dummy_cols(data[cov], remove_selected_columns=TRUE)
print(length(unlist(colnames(toAdd))))
print(collectColNames(cov, (colnames(toAdd))))
listDummyCol[i] <- collectColNames(cov, colnames(toAdd))
}
else{
toAdd<-data[cov]
listDummyCol[i] <- collectColNames(cov, colnames(toAdd))
}
if(is.null(data_dummy)){
data_dummy <- toAdd
}
else{
data_dummy<-cbind(data_dummy,toAdd)
}
}
listDummyCol
listDummyCol <- list()
colNames <- colnames(data)
data_dummy <- NULL
for(i in 1:length(colNames)){
cov = colNames[i]
if(is.factor(data[,cov]) && !(cov %in% c(treated_column_name, outcome_column_name))){
toAdd <- fastDummies::dummy_cols(data[cov], remove_selected_columns=TRUE)
print(length(unlist(colnames(toAdd))))
print(collectColNames(cov, (colnames(toAdd))))
listDummyCol[[i]] <- collectColNames(cov, colnames(toAdd))
}
else{
toAdd<-data[cov]
listDummyCol[[i]] <- collectColNames(cov, colnames(toAdd))
}
if(is.null(data_dummy)){
data_dummy <- toAdd
}
else{
data_dummy<-cbind(data_dummy,toAdd)
}
}
listDummyCol
library(AHB)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(AHB)
set.seed(45)
n <- 50
p <- 5
data <- gen_data(n, p) # Data we would like to match
holdout <- gen_data(n, p) # Data we will train on, to generate outcome model Y
names(data)
names(data)
AHB_fast_out <- AHB_fast_match(data = data, holdout = holdout)
library(AHB)
v
train_df <- gen_mixedData()
test_df <- gen_mixedData()
map1<- mapFactorToDummy(train_df, treated_column_name, outcome_column_name)
train_df <- map1[[1]]
list_dummyCols <- map1[[2]]
test_df <- mapFactorToDummy(test_df, treated_column_name, outcome_column_name)[[1]]
print(train_df)
library(AHB)
library(AHB)

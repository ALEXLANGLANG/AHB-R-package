which_missing <- is.na(tmp_data[[cov]])
n_missing <- sum(which_missing)
if (sum(which_missing) > 0) {
new_levels <-
c(levels(tmp_data[[cov]]), max_val + seq_len(n_missing))
tmp_data[[cov]] <- as.numeric(tmp_data[[cov]]) - 1
tmp_data[[cov]][which_missing] <-
max_val + seq_len(sum(which_missing))
tmp_data[[cov]] <- factor(tmp_data[[cov]], levels = new_levels)
}
}
data <- tmp_data
}
else {
warning('Was directed to skip matches on missing values, ',
'but no missing values found.')
}
}
if (missing_holdout == 'none') {
if (sum(is.na(holdout)) > 0) {
stop('Found missingness in `holdout` but was told to assume ',
'there was none. Please either change `missing_holdout` or ',
'supply `holdout` without missingness.')
}
}
else if (missing_holdout == 'ignore') {
holdout <- holdout[complete.cases(holdout), ]
}
else if (missing_holdout == 'impute') {
if (sum(is.na(holdout)) > 0) {
message('Starting imputation of `holdout`\r', appendLF = FALSE)
holdout <-
impute_missing(holdout, outcome_in_data, missing_holdout_imputations,
treated_column_name, outcome_column_name,
impute_with_treatment, impute_with_outcome)
message('Finished imputation of `holdout`\r', appendLF = FALSE)
}
}
if (is.data.frame(data)) {
data <- list(data)
}
if (is.data.frame(holdout)) {
holdout <- list(holdout)
}
# Change levels to allow for 'unmatched on this covariate' indicator: '*'
# Data is length 1 list
for (j in cov_inds) {
levels(data[[1]][, j]) <- c(levels(data[[1]][, j]), '*')
}
return(list(data = data,
holdout = holdout,
is_missing = is_missing,
orig_missing = orig_missing))
}
missing_out <-handle_missing_data(data, holdout,
treated_column_name, outcome_column_name,
missing_data, missing_holdout,
missing_holdout_imputations,
impute_with_treatment, impute_with_outcome)
View(missing_out)
missing_out <-handle_missing_data(data, holdout,
treated_column_name, outcome_column_name,
missing_data, missing_holdout,
missing_holdout_imputations,
impute_with_treatment, impute_with_outcome)
data <- gen_data()
data[1,"X1"] <- NA
data[2,"X2"] <- NA
data["X3"] = as.factor(letters[1:100])
holdout <- data.frame(data)
missing_out <-handle_missing_data(data, holdout,
treated_column_name, outcome_column_name,
missing_data, missing_holdout,
missing_holdout_imputations,
impute_with_treatment, impute_with_outcome)
View(missing_out)
treated_column_name = 'treated'
outcome_column_name = 'outcome'
black_box = "BART"
user_PE_fit = NULL
user_PE_fit_params = NULL
user_PE_predict = NULL
user_PE_predict_params = NULL
cv = F
C = 1.1
missing_data = 'drop'
missing_holdout = 'drop'
missing_data_imputations = 'impute'
missing_holdout_imputations = 'impute'
impute_with_treatment = TRUE
impute_with_outcome = FALSE
data <- gen_data()
data[1,"X1"] <- NA
data[2,"X2"] <- NA
data["X3"] = as.factor(letters[1:100])
holdout <- data.frame(data)
# AHB_MIP_match(data = data,holdout =holdout ,missing_dat= 2, missing_holdout = 2)
missing_out <-handle_missing_data(data, holdout,
treated_column_name, outcome_column_name,
missing_data, missing_holdout,
missing_holdout_imputations,
impute_with_treatment, impute_with_outcome)
View(missing_out)
devtools::document
devtools::document()
usethis::use_rcpp()
library(AHB)
treated_column_name = 'treated'
outcome_column_name = 'outcome'
black_box = "BART"
user_PE_fit = NULL
user_PE_fit_params = NULL
user_PE_predict = NULL
user_PE_predict_params = NULL
cv = F
C = 1.1
missing_data = 'drop'
missing_holdout = 'drop'
missing_data_imputations = 'impute'
missing_holdout_imputations = 'impute'
impute_with_treatment = TRUE
impute_with_outcome = FALSE
data <- gen_data()
data[1,"X1"] <- NA
data[2,"X2"] <- NA
data["X3"] = as.factor(letters[1:100])
holdout <- data.frame(data)
# AHB_MIP_match(data = data,holdout =holdout ,missing_dat= 2, missing_holdout = 2)
missing_out <-handle_missing_data(data, holdout,
treated_column_name, outcome_column_name,
missing_data, missing_holdout,
missing_holdout_imputations,
impute_with_treatment, impute_with_outcome)
data
View(missing_out)
missing_out[["orig_missing"]]
impute_missing <- function(data, outcome_in_data, n_imputations,
treated_column_name, outcome_column_name,
impute_with_treatment, impute_with_outcome) {
treatment_ind <- which(colnames(data) == treated_column_name)
outcome_ind <- which(colnames(data) == outcome_column_name)
pred_mat <- matrix(1, nrow = ncol(data), ncol = ncol(data))
diag(pred_mat) <- 0
if (!impute_with_treatment) {
pred_mat[, treatment_ind] <- 0
}
if (!impute_with_outcome) {
pred_mat[, outcome_ind] <- 0
}
pred_mat[c(treatment_ind, outcome_ind), ] <- 0
mice_out <-
mice::mice(data, m = n_imputations,
predictorMatrix = pred_mat, printFlag = FALSE)
imputed_data <- mice::complete(mice_out, action = 'all')
return(imputed_data)
}
handle_missing_data <-
function(data, holdout,
treated_column_name, outcome_column_name,
missing_data, missing_holdout,
missing_holdout_imputations,
impute_with_treatment, impute_with_outcome) {
outcome_in_data <- !is.null(data[[outcome_column_name]])
# Corresponds to data only
cov_inds <- which(!(colnames(data[[1]]) %in%
c(treated_column_name, outcome_column_name)))
if (outcome_in_data) {
to_drop_data <- is.na(data[[outcome_column_name]]) |
is.na(data[[treated_column_name]])
}
else {
to_drop_data <- is.na(data[[treated_column_name]])
}
to_drop_holdout <- is.na(holdout[[outcome_column_name]]) |
is.na(holdout[[treated_column_name]])
if (any(to_drop_data)) {
message('Found missingness in `data` in treatment and/or outcome; ',
'corresponding rows will be dropped.')
}
if (any(to_drop_holdout)) {
message('Found missingness in `holdout` in treatment and/or outcome; ',
'corresponding rows will be dropped.')
}
if (all(to_drop_data)) {
stop('Dropping all rows in `data` due to missingness ',
'in treatment and/or outcome.')
}
if (all(to_drop_holdout)) {
stop('Dropping all rows in `holdout` due to missingness ',
'in treatment and/or outcome.')
}
data <- data[!to_drop_data, ]
holdout <- holdout[!to_drop_holdout, ]
orig_missing <- which(is.na(data), arr.ind = TRUE)
if (missing_data == 'none') {
is_missing <- FALSE
if (sum(is.na(data)) > 0) {
stop('Found missingness in `data` but was told to assume there ',
'was none. Please either change `missing_data` or ',
'supply `data` without missingness.')
}
}
else if (missing_data == 'drop') {
is_missing <- apply(data, 1, function(row) any(is.na(row)))
if (all(is_missing)) {
stop('All rows in `data` contain missingness. ',
'In this case, matches may only be made if `missing_data` ',
" = 'ignore' or `missing_data` = 'impute'.")
}
}
else if (missing_data == 'impute') {
is_missing <- FALSE
if (sum(is.na(data)) > 0) {
message('Starting imputation of `data`\r', appendLF = FALSE)
data <- impute_missing(data, outcome_in_data, 1,
treated_column_name, outcome_column_name,
impute_with_treatment, impute_with_outcome)
message('Finished imputation of `data`\r', appendLF = FALSE)
}
else {
message('No missing data found; skipping imputation.')
}
}
else if (missing_data == 'ignore') {
is_missing <- FALSE
if (sum(is.na(data)) > 0) {
tmp_data <- data
for (cov in cov_inds) {
# -1 for conversion from factor to numeric
max_val <- max(as.numeric(tmp_data[[cov]]), na.rm = TRUE) - 1
which_missing <- is.na(tmp_data[[cov]])
n_missing <- sum(which_missing)
if (sum(which_missing) > 0) {
new_levels <-
c(levels(tmp_data[[cov]]), max_val + seq_len(n_missing))
tmp_data[[cov]] <- as.numeric(tmp_data[[cov]]) - 1
tmp_data[[cov]][which_missing] <-
max_val + seq_len(sum(which_missing))
tmp_data[[cov]] <- factor(tmp_data[[cov]], levels = new_levels)
}
}
data <- tmp_data
}
else {
warning('Was directed to skip matches on missing values, ',
'but no missing values found.')
}
}
if (missing_holdout == 'none') {
if (sum(is.na(holdout)) > 0) {
stop('Found missingness in `holdout` but was told to assume ',
'there was none. Please either change `missing_holdout` or ',
'supply `holdout` without missingness.')
}
}
else if (missing_holdout == 'ignore') {
holdout <- holdout[complete.cases(holdout), ]
}
else if (missing_holdout == 'impute') {
if (sum(is.na(holdout)) > 0) {
message('Starting imputation of `holdout`\r', appendLF = FALSE)
holdout <-
impute_missing(holdout, outcome_in_data, 1,
treated_column_name, outcome_column_name,
impute_with_treatment, impute_with_outcome)
message('Finished imputation of `holdout`\r', appendLF = FALSE)
}
}
if (is.data.frame(data)) {
data <- list(data)
}
if (is.data.frame(holdout)) {
holdout <- list(holdout)
}
# Change levels to allow for 'unmatched on this covariate' indicator: '*'
# Data is length 1 list
for (j in cov_inds) {
levels(data[[1]][, j]) <- c(levels(data[[1]][, j]), '*')
}
return(list(data = data,
holdout = holdout,
is_missing = is_missing,
orig_missing = orig_missing))
}
data <- gen_data()
data[1,"X1"] <- NA
data[2,"X2"] <- NA
data["X3"] = as.factor(letters[1:100])
missing_out <-handle_missing_data(data, holdout,
treated_column_name, outcome_column_name,
missing_data, missing_holdout,
missing_holdout_imputations,
impute_with_treatment, impute_with_outcome)
missing_data = 'drop'
missing_holdout = 'drop'
missing_data_imputations = 'impute'
missing_holdout_imputations = 'impute'
impute_with_treatment = TRUE
impute_with_outcome = FALSE
missing_out <-handle_missing_data(data, holdout,
treated_column_name, outcome_column_name,
missing_data, missing_holdout,
missing_holdout_imputations,
impute_with_treatment, impute_with_outcome)
View(missing_out)
missing_data = 'impute'
missing_holdout = 'impute'
missing_data_imputations = 'impute'
missing_holdout_imputations = 'impute'
impute_with_treatment = TRUE
impute_with_outcome = FALSE
data <- gen_data()
data[1,"X1"] <- NA
data[2,"X2"] <- NA
data["X3"] = as.factor(letters[1:100])
holdout <- data.frame(data)
# AHB_MIP_match(data = data,holdout =holdout ,missing_dat= 2, missing_holdout = 2)
missing_out <-handle_missing_data(data, holdout,
treated_column_name, outcome_column_name,
missing_data, missing_holdout,
missing_holdout_imputations,
impute_with_treatment, impute_with_outcome)
View(missing_out)
missing_out [[1]]
View(missing_out)
View(missing_out)
View(missing_out)
View(missing_out)
View(missing_out)
View(missing_out)
(typeof(missing_out[[1]]$x1))
typeof(missing_out[[1]]$X1)
data <- gen_data()
data[1,"X1"] <- NA
data[2,"X2"] <- NA
data["X3"] = as.factor(letters[1:100])
nums <- unlist(lapply(data, is.numeric))
nums
data
unlist(lapply(data, is.double))
unlist(lapply(data, is.single))
nums <- unlist(lapply(data, is.numeric))
which(nums)
nums
names(which(nums))
cov_inds_numeric <- which(unlist(lapply(data, is.double)))
cov_inds_numeric
unlist(lapply(data, is.double))
which(unlist(lapply(data, is.double)))  && cov_inds_data
cov_inds_data <- which(!(colnames(data) %in% c(treated_column_name, outcome_column_name)))
which(unlist(lapply(data, is.double)))  && cov_inds_data
which(unlist(lapply(data, is.double)))  & cov_inds_data
cov_inds_data
which(!(colnames(data) %in% c(treated_column_name, outcome_column_name)))
!(colnames(data) %in% c(treated_column_name, outcome_column_name))
which(unlist(lapply(data, is.double)))
lapply(data, is.double)
unlist(lapply(data, is.double))
which(unlist(lapply(data, is.double)))
names(which(unlist(lapply(data, is.double))))
colnames(which(unlist(lapply(data, is.double))))
names(which(unlist(lapply(data, is.double))))
which(! (names(which(unlist(lapply(data, is.double)))) %in% c(treated_column_name, outcome_column_name)))
Reduce(intersect,list(cov_inds_numeric,cov_inds_data))
data
cov_inds_data <- which(!(colnames(data) %in% c(treated_column_name, outcome_column_name)))
cov_inds_numeric <- which(unlist(lapply(data, is.double)))
cov_inds_numeric <- Reduce(intersect,list(cov_inds_numeric,cov_inds_data))
cov_inds_numeric
cov_inds_data
source('~/Desktop/github/AHB-R-package/AHB/R/mappings.R')
data <- gen_data()
data[1,"X1"] <- NA
data[2,"X2"] <- NA
data["X3"] = as.factor(letters[1:100])
data <- doMapping(data,treated_column_name = 'treated',outcome_column_name = 'outcome')
cov_inds_categorical <- which(unlist(lapply(data, !is.double)))
cov_inds_categorical <- which(unlist(lapply(data, !is.double)))
cov_inds_categorical <- which(unlist(lapply(data, is.double)))
cov_inds_data <- which(!(colnames(data) %in% c(treated_column_name, outcome_column_name)))
cov_inds_numeric <- which(unlist(lapply(data, is.double)))
cov_inds_numeric <- Reduce(intersect,list(cov_inds_numeric,cov_inds_data))
cov_inds_categorical <- list.setdiff(cov_inds_data, cov_inds_numeric)
cov_inds_data <- which(!(colnames(data) %in% c(treated_column_name, outcome_column_name)))
cov_inds_numeric <- which(unlist(lapply(data, is.double)))
cov_inds_numeric <- Reduce(intersect,list(cov_inds_numeric,cov_inds_data))
cov_inds_categorical <- cov_inds_data[!(cov_inds_data %in% cov_inds_numeric)]
data[, cov_inds_categorical] <-
lapply(data[, cov_inds_categorical, drop = FALSE], as.factor)
data
str(data)
devtools::document()
usethis::use_rcpp()
library(AHB)
devtools::document()
usethis::use_rcpp()
library(AHB)
devtools::document()
usethis::use_rcpp()
library(AHB)
library(AHB)
is.numeric(data[,"X1"]) == T
devtools::document()
usethis::use_rcpp()
library(AHB)
library(AHB)
devtools::document()
usethis::use_rcpp()
library(AHB)
devtools::document()
usethis::use_rcpp()
library(AHB)
installed.packages("mice")
library(AHB)
devtools::document()
usethis::use_rcpp()
library(AHB)
devtools::document()
usethis::use_rcpp()
library(AHB)
devtools::document()
usethis::use_rcpp()
library(AHB)
devtools::document()
usethis::use_rcpp()
library(AHB)
devtools::document()
library(AHB)
usethis::use_rcpp()
library(AHB)
usethis::use_rcpp()
library(AHB)
devtools::document()
usethis::use_rcpp()
library(AHB)
data <- gen_data()
data[1,"X1"] <- NA
data[2,"X2"] <- NA
data["X3"] = as.factor(letters[1:100])
is.double(data[,"X1"])
devtools::document()
usethis::use_rcpp()
library(AHB)
devtools::document()
usethis::use_rcpp()
library(AHB)
library(AHB)
devtools::document()
usethis::use_rcpp()
devtools::document()
usethis::use_rcpp()
library(AHB)
devtools::document()
devtools::document()
usethis::use_rcpp()
library(AHB)
devtools::document()
usethis::use_rcpp()
library(AHB)
installed.packages("assert")
installed.packages(assert)
installed.packages("assert")
install.packages(assert)
install.packages("assert")
library(AHB)
library(AHB)
devtools::document()
usethis::use_rcpp()
library(AHB)
data <- gen_data()
data[1,"X1"] <- NA
data[2,"X2"] <- NA
data["X3"] = as.factor(letters[1:100])
data
data[complete.cases(data, ]
complete.cases(data)
data[complete.cases(data),]
library(AHB)
if (!requireNamespace("assert", quietly = TRUE)) {
warning("The assert package must be installed")
return(NULL)
}
data <- gen_data()
data[1,"X1"] <- NA
data[2,"X2"] <- NA
data["X3"] = as.factor(letters[1:100])
assert::assert(sum(is.na(data)) > 0, TRUE)
data <- doMapping(data,treated_column_name = 'treated',outcome_column_name = 'outcome')
impute_missing(data,1,'treated','outcome', T,  T)
devtools::document()
usethis::use_rcpp()
library(AHB)
data <- gen_data()
data[1,"X1"] <- NA
data[2,"X2"] <- NA
data["X3"] = as.factor(letters[1:100])
assert::assert(sum(is.na(data)) > 0, TRUE)
data <- doMapping(data,treated_column_name = 'treated',outcome_column_name = 'outcome')
impute_missing(data,1,'treated','outcome', T,  T)
data <- gen_data()
data[1,"X1"] <- NA
data[2,"X2"] <- NA
data["X3"] = as.factor(letters[1:100])
assert::assert(sum(is.na(data)) > 0, TRUE)
data <- doMapping(data,treated_column_name = 'treated',outcome_column_name = 'outcome')
library(AHB)
data <- gen_data()
data[1,"X1"] <- NA
data[2,"X2"] <- NA
data["X3"] = as.factor(letters[1:100])
assert::assert(sum(is.na(data)) > 0, TRUE)
data <- doMapping(data,treated_column_name = 'treated',outcome_column_name = 'outcome')
